<!-- Structure -->

app/
├── api/public/
│ ├── cart
│     ├── router.py
│ ├── products
│     ├── router.py
├── auth/
│ ├── router.py
│ ├── oauth.py
│ └── services.py
│ ├── dependencies.py
├── cart/
│ └── services.py
├── _pycache_/
├── customers/
│ ├── router.py
│ ├── schemas.py
│ └── services.py
├── invoices/
│ ├── router.py
│ ├── schemas.py
│ └── services.py
├── products/
│ ├── router.py
│ ├── schemas.py
│ └── services.py
├── restock/
│ ├── router.py
│ ├── schemas.py
│ └── services.py
├── sales/
│ ├── router.py
│ ├── schemas.py
│ └── services.py
├── users/
│ ├── router.py
│ ├── schemas.py
│ └── services.py
├── models/
│ ├── cart_model.py
│ ├── customer_models.py
| ├── email_varification.py
│ ├── invoice_models.py
│ ├── user_model.py
│ ├── products_models.py
│ ├── restock_models.py
│ ├── sale_models.py
├── utils/
│ ├──utils.py

├── venv/
├── **init**.py
├── api_router.py
├── config.py
├── crud.py
├── database.py
├── main.py
├── models.py
├── schemas.py
├── web_routers.py
├── frontend/
├── static/
|--templates/
| ├── callback.html
| ├── login.html
| ├── register.html
| ├── varify_email.html
| ├── products.html
| ├── product_details.html
| ├── product_cart.html

├── node_modules/
├── static/
├── templates/
│ ├── base.py
│ ├── customer_models.py
│ ├── customer_balances.py
| ├── customer_transactions.py
│ ├── customers.py
│ ├── edit_product.py
│ ├── index.py
│ ├── inventory_value.py
│ ├── invoice_template.py
│ ├── invoices.py
│ ├── products.py
│ ├── restocks.py
│ └── sales_report.py
│ └── sales.py
└── venv/


from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Product(BaseModel):
    id: int
    name: str
    description: str
    price: float
    quantity: int

@app.post("/products/", response_model=Product)
async def create_product(product: Product):
    # Simulating a response
    print(product)
    return product  # Ensure the returned data matches the Product schema
\n\n./__init__.py:\n
from app.database import Base, engine
from app.models import Product, Sale, Restock, Invoice, Customer

# Drop all tables and recreate them
Base.metadata.drop_all(bind=engine)
Base.metadata.create_all(bind=engine)\n\n./app/schemas.py:\n
from pydantic import BaseModel, Field, validator
from typing import Optional, List
from datetime import datetime

class ProductBase(BaseModel):
    name: str
    description: Optional[str] = None
    price: float = Field(gt=0)
    quantity: int = Field(ge=0)

class ProductCreate(ProductBase):
    pass

class ProductUpdate(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    price: Optional[float] = Field(gt=0)
    quantity: Optional[int] = Field(ge=0)

class Product(ProductBase):
    id: int

    class Config:
        from_attributes = True

class CustomerBase(BaseModel):
    name: str
    email: str
    phone_number: Optional[str] = None
    address: Optional[str] = None
    balance_owe: float = Field(default=0.0, ge=0)

class CustomerCreate(CustomerBase):
    pass

class Customer(CustomerBase):
    id: int

    class Config:
        from_attributes = True

class SaleBase(BaseModel):
    product_id: int
    customer_id: int
    quantity: int = Field(gt=0)
    selling_price: float = Field(gt=0)
    amount_received: float = Field(ge=0)

# class SaleCreate(SaleBase):
#     pass

# class Sale(SaleBase):
#     id: int
#     sale_date: datetime

#     class Config:
#         from_attributes = True

class RestockBase(BaseModel):
    product_id: int
    quantity: int

class RestockCreate(RestockBase):
    pass

class Restock(RestockBase):
    id: int
    restock_date: datetime
    product_name: str  # Add product name

    class Config:
        from_attributes = True

class InvoiceBase(BaseModel):
    sale_id: int

class InvoiceCreate(InvoiceBase):
    pass

class Invoice(InvoiceBase):
    id: int
    invoice_date: datetime

    class Config:
        from_attributes = True



# schemas.py changes
from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import datetime

class SaleItemBase(BaseModel):
    product_id: int
    quantity: int
    price: float

class SaleItemCreate(SaleItemBase):
    pass

class SaleItem(SaleItemBase):
    id: int
    sale_id: int

    class Config:
        from_attributes = True

class SaleCreate(BaseModel):
    customer_id: int
    items: List[SaleItemCreate]
    amount_received: float

class Sale(BaseModel):
    id: int
    customer_id: int
    total_amount: float
    amount_received: float
    balance: float
    sale_date: datetime
    status: str
    items: List[SaleItem]

    class Config:
        from_attributes = True\n\n./app/main.py:\n
from fastapi import FastAPI, Depends, HTTPException, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session,joinedload
from . import crud, schemas, models, database
from datetime import datetime, timedelta
app = FastAPI()

# Mount static files
app.mount("/static", StaticFiles(directory="static"), name="static")

# Initialize templates
templates = Jinja2Templates(directory="templates")

# Dependency to get the database session
def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Helper function for rendering templates
def render_template(template_name: str, request: Request, context: dict = {}):
    context["request"] = request
    return templates.TemplateResponse(template_name, context)

# Root Endpoint
@app.get("/", response_class=HTMLResponse)
def read_root(request: Request):
    return render_template("index.html", request)

# Product Endpoints
@app.get("/products", response_class=HTMLResponse)
def read_products(request: Request, db: Session = Depends(get_db)):
    products = crud.get_all_products(db)
    return render_template("products.html", request, {"products": products})

@app.post("/products/", response_model=schemas.Product)
def create_product(product: schemas.ProductCreate, db: Session = Depends(get_db)):
    return crud.create_product(db, product)

@app.get("/products/{product_id}/edit", response_class=HTMLResponse)
def edit_product(request: Request, product_id: int, db: Session = Depends(get_db)):
    product = crud.get_product_by_id(db, product_id)
    if not product:
        raise HTTPException(status_code=404, detail="Product not found")
    return render_template("edit_product.html", request, {"product": product})

@app.put("/products/{product_id}", response_model=schemas.Product)
def update_product(product_id: int, product: schemas.ProductUpdate, db: Session = Depends(get_db)):
    db_product = crud.update_product(db, product_id, product)
    if not db_product:
        raise HTTPException(status_code=404, detail="Product not found")
    return db_product

@app.delete("/products/{product_id}", response_model=schemas.Product)
def delete_product(product_id: int, db: Session = Depends(get_db)):
    db_product = crud.delete_product(db, product_id)
    if not db_product:
        raise HTTPException(status_code=404, detail="Product not found")
    return db_product

# Customer Endpoints
@app.get("/customers", response_class=HTMLResponse)
def read_customers(request: Request, db: Session = Depends(get_db)):
    customers = crud.get_all_customers(db)
    return render_template("customers.html", request, {"customers": customers})

@app.post("/customers/", response_model=schemas.Customer)
def create_customer(customer: schemas.CustomerCreate, db: Session = Depends(get_db)):
    return crud.create_customer(db, customer)

# Sale Endpoints
@app.get("/sales", response_class=HTMLResponse)
def read_sales(request: Request, db: Session = Depends(get_db)):
    products = crud.get_all_products(db)
    customers = crud.get_all_customers(db)
    sales = crud.get_all_sales(db)
    return render_template("sales.html", request, {
        "products": products,
        "customers": customers,
        "sales": sales,
    })

@app.post("/sales/", response_model=schemas.Sale)
def create_sale(sale: schemas.SaleCreate, db: Session = Depends(get_db)):
    try:
        return crud.create_sale(db, sale)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

# Restock Endpoints
@app.get("/restocks", response_class=HTMLResponse)
def read_restocks(request: Request, db: Session = Depends(get_db)):
    restocks = crud.get_all_restocks(db)
    products = crud.get_all_products(db)  # Fetch all products
    return templates.TemplateResponse(
        "restocks.html",
        {"request": request, "restocks": restocks, "products": products},
    )


@app.post("/restocks/", response_model=schemas.Restock)
def create_restock(restock: schemas.RestockCreate, db: Session = Depends(get_db)):
    try:
        return crud.create_restock(db, restock)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

# Invoice Endpoints
@app.get("/invoices", response_class=HTMLResponse)
def read_invoices(request: Request, db: Session = Depends(get_db)):
    invoices = crud.get_all_invoices(db)
    return render_template("invoices.html", request, {"invoices": invoices})

@app.post("/invoices/", response_model=schemas.Invoice)
def create_invoice(invoice: schemas.InvoiceCreate, db: Session = Depends(get_db)):
    try:
        return crud.create_invoice(db, invoice)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.get("/invoices/{invoice_id}", response_class=HTMLResponse)
def generate_invoice(invoice_id: int, request: Request, db: Session = Depends(get_db)):
    invoice = (
        db.query(models.Invoice)
        .options(
            joinedload(models.Invoice.sale)
            .joinedload(models.Sale.items)  # Load sale items
            .joinedload(models.SaleItem.product),  # Load products through SaleItem
            joinedload(models.Invoice.sale)
            .joinedload(models.Sale.customer)  # Load customer details
        )
        .filter(models.Invoice.id == invoice_id)
        .first()
    )

    if not invoice:
        raise HTTPException(status_code=404, detail="Invoice not found")

    return templates.TemplateResponse(
        "invoice_template.html",
        {"request": request, "invoice": invoice}
    )


@app.get("/customers/{customer_id}/transactions", response_class=HTMLResponse)
def view_customer_transactions(request: Request, customer_id: int, db: Session = Depends(get_db)):
    customer = crud.get_customer_by_id(db, customer_id)
    if not customer:
        raise HTTPException(status_code=404, detail="Customer not found")
    
    transactions = db.query(models.Sale).filter(models.Sale.customer_id == customer_id).all()
    return render_template("customer_transactions.html", request, {"customer": customer, "transactions": transactions})


@app.get("/sales/report", response_class=HTMLResponse)
def sales_report(request: Request, db: Session = Depends(get_db)):
    daily_sales = db.query(models.Sale).filter(models.Sale.sale_date >= datetime.today().date()).all()
    weekly_sales = db.query(models.Sale).filter(models.Sale.sale_date >= datetime.today().date() - timedelta(days=7)).all()
    monthly_sales = db.query(models.Sale).filter(models.Sale.sale_date >= datetime.today().date() - timedelta(days=30)).all()

    daily_total = sum(sale.total_amount  for sale in daily_sales)
    weekly_total = sum(sale.total_amount  for sale in weekly_sales)
    monthly_total = sum(sale.total_amount  for sale in monthly_sales)

    return render_template("sales_report.html", request, {
        "daily_sales": daily_sales,
        "weekly_sales": weekly_sales,
        "monthly_sales": monthly_sales,
        "daily_total": daily_total,
        "weekly_total": weekly_total,
        "monthly_total": monthly_total,
    })

@app.get("/customers/balances", response_class=HTMLResponse)
def customer_balances(request: Request, db: Session = Depends(get_db)):
    customers = db.query(models.Customer).all()
    return render_template("customer_balances.html", request, {"customers": customers})


@app.get("/inventory/value", response_class=HTMLResponse)
def inventory_value(request: Request, db: Session = Depends(get_db)):
    products = db.query(models.Product).all()
    total_value = sum(product.price * product.quantity for product in products)
    return render_template("inventory_value.html", request, {"total_value": total_value})

@app.get("/sales/{sale_id}/details")
def get_sale_details(sale_id: int, db: Session = Depends(get_db)):
    sale = db.query(models.Sale).filter(models.Sale.id == sale_id).first()
    if not sale:
        raise HTTPException(status_code=404, detail="Sale not found")
    return {
        "id": sale.id,
        "customer_name": sale.customer.name,
        "total_amount": sale.total_amount,
        "items": [{
            "product_name": item.product.name,
            "quantity": item.quantity,
            "price": item.price,
        } for item in sale.items]
    }


\n\n./app/database.py:\n
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

class Settings:
    DATABASE_URL = "sqlite:///./inventory.db"  # Replace with your actual database URL

settings = Settings()


SQLALCHEMY_DATABASE_URL = settings.DATABASE_URL

engine = create_engine(
    SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()\n\n./app/models.py:\n
from sqlalchemy import Column, Integer, String, Float, DateTime, ForeignKey, JSON
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from .database import Base

# class Product(Base):
#     __tablename__ = "products"
#     id = Column(Integer, primary_key=True, index=True)
#     name = Column(String, index=True)
#     description = Column(String, nullable=True)
#     price = Column(Float)
#     quantity = Column(Integer)

#     sales = relationship("Sale", back_populates="product")

class Customer(Base):
    __tablename__ = "customers"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    email = Column(String, unique=True, index=True)
    phone_number = Column(String)
    address = Column(String)
    balance_owe = Column(Float, default=0.0)
    previous_transactions = Column(JSON, default=[])

    sales = relationship("Sale", back_populates="customer")

# class Sale(Base):
#     __tablename__ = "sales"
#     id = Column(Integer, primary_key=True, index=True)
#     product_id = Column(Integer, ForeignKey("products.id"))
#     customer_id = Column(Integer, ForeignKey("customers.id"))
#     quantity = Column(Integer)
#     selling_price = Column(Float)
#     amount_received = Column(Float)
#     balance = Column(Float)
#     profit = Column(Float)
#     sale_date = Column(DateTime, default=func.now())

#     product = relationship("Product", back_populates="sales")
#     customer = relationship("Customer", back_populates="sales")
#     invoice = relationship("Invoice", back_populates="sale", uselist=False)




class Restock(Base):
    __tablename__ = "restocks"
    id = Column(Integer, primary_key=True, index=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    quantity = Column(Integer)
    restock_date = Column(DateTime, default=func.now())

    # Add relationship to Product
    product = relationship("Product", back_populates="restocks")
    

# # Add back-populate to Product model
# class Product(Base):
#     __tablename__ = "products"
#     id = Column(Integer, primary_key=True, index=True)
#     name = Column(String, index=True)
#     description = Column(String, nullable=True)
#     price = Column(Float)
#     quantity = Column(Integer)

#     # Define relationships
#     sales = relationship("Sale", back_populates="product")  # Relationship to Sale
#     restocks = relationship("Restock", back_populates="product")  # Relationship to Restock
class Invoice(Base):
    __tablename__ = "invoices"
    id = Column(Integer, primary_key=True, index=True)
    sale_id = Column(Integer, ForeignKey("sales.id"))
    invoice_date = Column(DateTime, default=func.now())

    sale = relationship("Sale", back_populates="invoice")



# models.py changes
from sqlalchemy import Column, Integer, String, Float, DateTime, ForeignKey, JSON, Table
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from .database import Base

# Association table for sale items
class SaleItem(Base):
    __tablename__ = 'sale_items'
    id = Column(Integer, primary_key=True)
    sale_id = Column(Integer, ForeignKey('sales.id'))
    product_id = Column(Integer, ForeignKey('products.id'))
    quantity = Column(Integer)
    price = Column(Float)

    # Relationships
    sale = relationship("Sale", back_populates="items")
    product = relationship("Product", back_populates="sale_items")

class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(String, nullable=True)
    price = Column(Float)
    quantity = Column(Integer)

    # Define relationships
    sale_items = relationship("SaleItem", back_populates="product")
    restocks = relationship("Restock", back_populates="product")

class Sale(Base):
    __tablename__ = "sales"
    id = Column(Integer, primary_key=True, index=True)
    customer_id = Column(Integer, ForeignKey("customers.id"))
    total_amount = Column(Float, default=0.0)
    amount_received = Column(Float, default=0.0)
    balance = Column(Float, default=0.0)
    sale_date = Column(DateTime, default=func.now())
    status = Column(String, default="pending")

    # Relationships
    customer = relationship("Customer", back_populates="sales")
    items = relationship("SaleItem", back_populates="sale")
    invoice = relationship("Invoice", back_populates="sale", uselist=False)

\n\n./app/crud.py:\n
from sqlalchemy.orm import Session
from . import models, schemas
from datetime import datetime
from typing import List, Optional

# Utility functions
def get_product_by_id(db: Session, product_id: int) -> Optional[models.Product]:
    return db.query(models.Product).filter(models.Product.id == product_id).first()

def get_customer_by_id(db: Session, customer_id: int) -> Optional[models.Customer]:
    return db.query(models.Customer).filter(models.Customer.id == customer_id).first()

# Product CRUD
def create_product(db: Session, product: schemas.ProductCreate) -> models.Product:
    db_product = models.Product(**product.dict())
    db.add(db_product)
    db.commit()
    db.refresh(db_product)
    return db_product

def get_all_products(db: Session) -> List[models.Product]:
    return db.query(models.Product).all()



def delete_product(db: Session, product_id: int):
    product = db.query(models.Product).filter(models.Product.id == product_id).first()
    if product:
        db.delete(product)
        db.commit()  # Ensure changes are committed to the database
        return product  # Return the deleted product or details
    return None

# Customer CRUD
def create_customer(db: Session, customer: schemas.CustomerCreate) -> models.Customer:
    db_customer = models.Customer(**customer.dict())
    db.add(db_customer)
    db.commit()
    db.refresh(db_customer)
    return db_customer

def get_all_customers(db: Session) -> List[models.Customer]:
    return db.query(models.Customer).all()

# Sale CRUD
# def create_sale(db: Session, sale: schemas.SaleCreate):
#     product = get_product_by_id(db, sale.product_id)
#     if not product:
#         raise ValueError("Product not found")
#     if product.quantity < sale.quantity:
#         raise ValueError("Not enough stock available")

#     customer = get_customer_by_id(db, sale.customer_id)
#     if not customer:
#         raise ValueError("Customer not found")

#     profit = (sale.selling_price*sale.quantity) - (product.price * sale.quantity)
#     balance = (sale.selling_price*sale.quantity) - sale.amount_received

#     product.quantity -= sale.quantity
#     customer.balance_owe += balance

#     db_sale = models.Sale(
#         product_id=sale.product_id,
#         customer_id=sale.customer_id,
#         quantity=sale.quantity,
#         selling_price=sale.selling_price,
#         amount_received=sale.amount_received,
#         balance=balance,
#         profit=profit,
#     )

#     db.add(db_sale)
#     db.commit()
#     db.refresh(db_sale)
#     return db_sale

def get_all_sales(db: Session) -> List[models.Sale]:
    return db.query(models.Sale).all()

# Restock CRUD
def create_restock(db: Session, restock: schemas.RestockCreate):
    db_restock = models.Restock(**restock.dict())
    db.add(db_restock)
    db.commit()
    db.refresh(db_restock)

    # Update product quantity
    product = db.query(models.Product).filter(models.Product.id == restock.product_id).first()
    if product:
        product.quantity += restock.quantity  # Add restocked quantity
        db.commit()
        db.refresh(product)

    return db_restock

def get_all_restocks(db: Session) -> List[models.Restock]:
    return db.query(models.Restock).all()

# Invoice CRUD
def create_invoice(db: Session, invoice: schemas.InvoiceCreate) -> models.Invoice:
    sale = db.query(models.Sale).filter(models.Sale.id == invoice.sale_id).first()
    if not sale:
        raise ValueError("Sale not found")

    db_invoice = models.Invoice(**invoice.dict())
    db.add(db_invoice)
    db.commit()
    db.refresh(db_invoice)
    return db_invoice

def get_all_invoices(db: Session) -> List[models.Invoice]:
    return db.query(models.Invoice).all()

def update_product(db: Session, product_id: int, product_update: schemas.ProductUpdate):
    db_product = db.query(models.Product).filter(models.Product.id == product_id).first()
    if not db_product:
        return None
    update_data = product_update.dict(exclude_unset=True)
    for key, value in update_data.items():
        setattr(db_product, key, value)
    db.commit()
    db.refresh(db_product)
    return db_product

# def update_product(db: Session, product_id: int, product: schemas.ProductUpdate) -> Optional[models.Product]:
#     db_product = get_product_by_id(db, product_id)
#     if db_product:
#         for key, value in product.dict(exclude_unset=True).items():
#             setattr(db_product, key, value)
#         db.commit()
#         db.refresh(db_product)
#     return db_product


from sqlalchemy.exc import SQLAlchemyError

def create_sale(db: Session, sale: schemas.SaleCreate):
    # Calculate total amount and validate products
    total_amount = 0
    sale_items = []
    
    # Verify and process each item
    for item in sale.items:
        product = get_product_by_id(db, item.product_id)
        if not product:
            raise ValueError(f"Product {item.product_id} not found")
        if product.quantity < item.quantity:
            raise ValueError(f"Insufficient stock for product {product.name}")
        
        subtotal = item.price * item.quantity
        total_amount += subtotal
        
        # Prepare sale item
        sale_items.append({
            "product_id": item.product_id,
            "quantity": item.quantity,
            "price": item.price
        })
        
        # Update product quantity
        product.quantity -= item.quantity

    # Calculate balance
    balance = total_amount - sale.amount_received

    # Create sale record
    db_sale = models.Sale(
        customer_id=sale.customer_id,
        total_amount=total_amount,
        amount_received=sale.amount_received,
        balance=balance,
        status="completed" if balance <= 0 else "pending"
    )
    
    try:
        db.add(db_sale)
        db.flush()  # Get the sale ID without committing

        # Create sale items
        for item_data in sale_items:
            sale_item = models.SaleItem(
                sale_id=db_sale.id,
                product_id=item_data["product_id"],
                quantity=item_data["quantity"],
                price=item_data["price"]
            )
            db.add(sale_item)

        # Update the customer's balance_owe
        customer = db.query(models.Customer).filter_by(id=sale.customer_id).first()
        if customer:
            customer.balance_owe += balance

        db.commit()  # Commit all changes to the database
        db.refresh(db_sale)  # Refresh sale to get the updated data
        
        # Generate invoice automatically if paid in full
        if db_sale.status == "completed":
            create_invoice(db, schemas.InvoiceCreate(sale_id=db_sale.id))

        return db_sale

    except SQLAlchemyError as e:
        db.rollback()  # Rollback in case of any error
        raise Exception(f"An error occurred while creating the sale: {str(e)}")

def update_sale_payment(db: Session, sale_id: int, amount: float):
    sale = db.query(models.Sale).filter(models.Sale.id == sale_id).first()
    if not sale:
        raise ValueError("Sale not found")
    
    sale.amount_received += amount
    sale.balance = sale.total_amount - sale.amount_received
    
    if sale.balance <= 0:
        sale.status = "completed"
        # Generate invoice if not already generated
        if not sale.invoice:
            create_invoice(db, schemas.InvoiceCreate(sale_id=sale.id))
    
    db.commit()
    db.refresh(sale)
    return sale\n\n./static/js/main.js:\n



// Function to handle form submissions
async function submitForm(formId, endpoint, method = "POST") {
    const form = document.getElementById(formId);
    if (!form) return;

    form.removeEventListener("submit", handleSubmit);

    async function handleSubmit(e) {
        e.preventDefault();

        const submitButton = form.querySelector("button[type='submit']");
        if (submitButton) {
            submitButton.disabled = true;
            submitButton.textContent = "Submitting...";
        }

        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch(endpoint, {
                method: method,
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
            });

            if (response.ok) {
                alert("Operation successful!");
                window.location.reload();
            } else {
                const errorData = await response.json();
                alert(`Error: ${errorData.detail || "Something went wrong!"}`);
            }
        } catch (error) {
            console.error("Error:", error);
            alert("An error occurred. Please try again.");
        } finally {
            if (submitButton) {
                submitButton.disabled = false;
                submitButton.textContent = "Submit";
            }
        }
    }

    form.addEventListener("submit", handleSubmit);
}

// Initialize form submissions when the DOM is fully loaded
document.addEventListener("DOMContentLoaded", () => {
    submitForm("productForm", "/products/");
    submitForm("customerForm", "/customers/");
    submitForm("saleForm", "/sales/");
    submitForm("restockForm", "/restocks/");
    submitForm("invoiceForm", "/invoices/");

    const editProductForm = document.getElementById("editProductForm");
    if (editProductForm) {
        const productId = document.getElementById("id").value;
        submitForm("editProductForm", `/products/${productId}`, "PUT");
    }
});

// document.addEventListener("DOMContentLoaded", () => {
//     submitForm("restockForm", "/restocks/");
// });



// Add this to your main.js file or create a new sales.js file

let saleItems = [];

function updateTotalAmount() {
    const total = saleItems.reduce((sum, item) => sum + (item.quantity * item.price), 0);
    document.getElementById('total-amount').textContent = total.toFixed(2);
    
    // Update balance
    const amountReceived = parseFloat(document.getElementById('amount_received').value) || 0;
    const balance = total - amountReceived;
    document.getElementById('balance-amount').textContent = balance.toFixed(2);
}

function validateStock(productId, quantity) {
    const option = document.querySelector(`#product_id option[value="${productId}"]`);
    const availableStock = parseInt(option.dataset.stock);
    return quantity <= availableStock;
}

document.getElementById('add-item').addEventListener('click', function() {
    const productSelect = document.getElementById('product_id');
    const quantity = parseInt(document.getElementById('quantity').value);
    const price = parseFloat(document.getElementById('selling_price').value);
    
    const productId = parseInt(productSelect.value);
    const productName = productSelect.options[productSelect.selectedIndex].text;
    
    if (!productId || !quantity || !price) {
        alert('Please fill in all fields');
        return;
    }

    if (!validateStock(productId, quantity)) {
        alert('Insufficient stock available');
        return;
    }
    
    saleItems.push({
        product_id: productId,
        quantity: quantity,
        price: price,
        product_name: productName
    });
    
    updateSaleItemsTable();
    updateTotalAmount();
    
    // Reset input fields
    document.getElementById('quantity').value = '1';
    document.getElementById('product_id').dispatchEvent(new Event('change'));
});

function updateSaleItemsTable() {
    const tbody = document.getElementById('sale-items-tbody');
    tbody.innerHTML = '';
    
    saleItems.forEach((item, index) => {
        const tr = document.createElement('tr');
        const subtotal = item.quantity * item.price;
        
        tr.innerHTML = `
            <td>${item.product_name}</td>
            <td>${item.quantity}</td>
            <td>${item.price.toFixed(2)}</td>
            <td>${subtotal.toFixed(2)}</td>
            <td>
                <button type="button" onclick="removeSaleItem(${index})" class="btn btn-danger btn-sm">Remove</button>
                <button type="button" onclick="editSaleItem(${index})" class="btn btn-primary btn-sm">Edit</button>
            </td>
        `;
        
        tbody.appendChild(tr);
    });
}

function removeSaleItem(index) {
    saleItems.splice(index, 1);
    updateSaleItemsTable();
    updateTotalAmount();
}

function editSaleItem(index) {
    const item = saleItems[index];
    document.getElementById('product_id').value = item.product_id;
    document.getElementById('quantity').value = item.quantity;
    document.getElementById('selling_price').value = item.price;
    
    removeSaleItem(index);
}

document.getElementById('amount_received').addEventListener('input', updateTotalAmount);

document.getElementById('saleForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    if (saleItems.length === 0) {
        alert('Please add at least one item to the sale');
        return;
    }
    
    const formData = {
        customer_id: parseInt(document.getElementById('customer_id').value),
        items: saleItems,
        amount_received: parseFloat(document.getElementById('amount_received').value) || 0
    };
    
    try {
        const response = await fetch('/sales/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
        });
        
        if (response.ok) {
            alert('Sale recorded successfully!');
            window.location.reload();
        } else {
            const error = await response.json();
            alert(`Error: ${error.detail}`);
        }
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while recording the sale');
    }
});

// View sale details
document.querySelectorAll('.view-details').forEach(button => {
    button.addEventListener('click', async function() {
        const saleId = this.dataset.saleId;
        try {
            const response = await fetch(`/sales/${saleId}/details`);
            if (response.ok) {
                const details = await response.json();
                showSaleDetails(details);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });
});

function showSaleDetails(details) {
    const modal = new bootstrap.Modal(document.getElementById('saleDetailsModal'));
    const content = document.getElementById('saleDetailsContent');
    
    let itemsHtml = details.items.map(item => `
        <tr>
            <td>${item.product_name}</td>
            <td>${item.quantity}</td>
            <td>${item.price.toFixed(2)}</td>
            <td>${(item.quantity * item.price).toFixed(2)}</td>
        </tr>
    `).join('');
    
    content.innerHTML = `
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Subtotal</th>
                    </tr>
                </thead>
                <tbody>
                    ${itemsHtml}
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="3" class="text-end"><strong>Total:</strong></td>
                        <td>${details.total_amount.toFixed(2)}</td>
                    </tr>
                </tfoot>
            </table>
        </div>
    `;
    
    modal.show();
}




Authentication

- Use the default admin/public credentials
- username: admin
- password: password

Musavir Khaliq
5:00 AM
https://docs.google.com/document/d/1tRaTOgA-mOhXLNwmGuzqn80Hlilcue7EPtTeNsQgW40/edit?pli=1&tab=t.0#heading=h.rlr22ukcvzmm
Musavir Khaliq
5:05 AM
├── app/
│ ├── api/ # API routes
│ │ ├── admin/ # Admin-specific endpoints
│ │ │ ├── routes.py
│ │ │ └── dependencies.py
│ │ ├── public/ # Public/customer-facing endpoints
│ │ │ ├── routes.py
│ │ │ └── dependencies.py
│ │ └── **init**.py
│ ├── core/ # Core utilities and configuration
│ │ ├── config.py
│ │ ├── security.py # Authentication/Authorization logic
│ │ └── exceptions.py
│ ├── cr
