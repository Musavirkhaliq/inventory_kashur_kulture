.
├── app
│   ├── crud.py
│   ├── database.py
│   ├── main.py
│   ├── models.py
│   └── schemas.py
├── __init__.py
├── inventory.db
├── learn.md
├── print_contents.txt
├── README.md
├── specifications.txt
├── static
│   ├── css
│   │   └── style.css
│   └── js
│       └── main.js
├── structure.txt
└── templates
    ├── base.html
    ├── edit_product.html
    ├── index.html
    ├── invoices.html
    ├── products.html
    ├── restocks.html
    ├── sales.html
    └── sales_report.html

7 directories, 29 files
\n\n./__init__.py:\n
from app.database import Base, engine
from app.models import Product, Sale, Restock, Invoice

# Drop all tables and recreate them
Base.metadata.drop_all(bind=engine)
Base.metadata.create_all(bind=engine)\n\n./print_contents.txt:\n
tree
find . -type f -exec echo "\n\n{}:\n" \; -exec cat {} \;\n\n./README.md:\n
# inventory_kashur_kulture\n\n./app/schemas.py:\n
from pydantic import BaseModel
from typing import Optional
from datetime import datetime
class ProductBase(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    quantity: int

class ProductCreate(ProductBase):
    pass

class Product(ProductBase):
    id: int

    class Config:
        from_attributes = True

class SaleBase(BaseModel):
    product_id: int
    quantity: int

class SaleCreate(SaleBase):
    pass

class Sale(SaleBase):
    id: int
    sale_date: datetime

    class Config:
        from_attributes = True

class RestockBase(BaseModel):
    product_id: int
    quantity: int

class RestockCreate(RestockBase):
    pass

class Restock(RestockBase):
    id: int
    restock_date: datetime

    class Config:
        from_attributes = True

class InvoiceBase(BaseModel):
    sale_id: int

class InvoiceCreate(InvoiceBase):
    pass

class Invoice(InvoiceBase):
    id: int
    invoice_date: datetime

    class Config:
        from_attributes = True


class ProductUpdate(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    price: Optional[float] = None
    quantity: Optional[int] = None\n\n./app/main.py:\n
from fastapi import FastAPI, Depends, HTTPException, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session
from . import crud, schemas, models, database

app = FastAPI()

# Mount static files
app.mount("/static", StaticFiles(directory="static"), name="static")

# Initialize templates
templates = Jinja2Templates(directory="templates")

# Dependency to get the database session
def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Root Endpoint
@app.get("/", response_class=HTMLResponse)
def read_root(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# Product Endpoints
@app.get("/products", response_class=HTMLResponse)
def read_products(request: Request, db: Session = Depends(get_db)):
    products = crud.get_all_products(db)
    return templates.TemplateResponse("products.html", {"request": request, "products": products})

@app.post("/products/", response_model=schemas.Product)
def create_product(product: schemas.ProductCreate, db: Session = Depends(get_db)):
    return crud.create_product(db, product)

@app.post("/products/", response_model=schemas.Product)
def create_product(product: schemas.ProductCreate, db: Session = Depends(get_db)):
    return crud.create_product(db, product)

# Sale Endpoints
@app.get("/sales", response_class=HTMLResponse)
def read_sales(request: Request, db: Session = Depends(get_db)):
    sales = crud.get_all_sales(db)
    return templates.TemplateResponse("sales.html", {"request": request, "sales": sales})

@app.post("/sales/", response_model=schemas.Sale)
def create_sale(sale: schemas.SaleCreate, db: Session = Depends(get_db)):
    return crud.create_sale(db, sale)

# Restock Endpoints
@app.get("/restocks", response_class=HTMLResponse)
def read_restocks(request: Request, db: Session = Depends(get_db)):
    restocks = crud.get_all_restocks(db)
    return templates.TemplateResponse("restocks.html", {"request": request, "restocks": restocks})

@app.post("/restocks/", response_model=schemas.Restock)
def create_restock(restock: schemas.RestockCreate, db: Session = Depends(get_db)):
    return crud.create_restock(db, restock)

# Invoice Endpoints
@app.get("/invoices", response_class=HTMLResponse)
def read_invoices(request: Request, db: Session = Depends(get_db)):
    invoices = crud.get_all_invoices(db)
    return templates.TemplateResponse("invoices.html", {"request": request, "invoices": invoices})

@app.post("/invoices/", response_model=schemas.Invoice)
def create_invoice(invoice: schemas.InvoiceCreate, db: Session = Depends(get_db)):
    return crud.create_invoice(db, invoice)


@app.get("/products/{product_id}/edit", response_class=HTMLResponse)
def edit_product(request: Request, product_id: int, db: Session = Depends(get_db)):
    product = crud.get_product(db, product_id)
    if product is None:
        raise HTTPException(status_code=404, detail="Product not found")
    return templates.TemplateResponse("edit_product.html", {"request": request, "product": product})

@app.put("/products/{product_id}", response_model=schemas.Product)
def update_product(product_id: int, product: schemas.ProductUpdate, db: Session = Depends(get_db)):
    db_product = crud.update_product(db, product_id, product)
    if db_product is None:
        raise HTTPException(status_code=404, detail="Product not found")
    return db_product
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

SQLALCHEMY_DATABASE_URL = "sqlite:///./inventory.db"

engine = create_engine(
    SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()\n\n./app/models.py:\n
from sqlalchemy import Column, Integer, String, Float, DateTime, ForeignKey
from sqlalchemy.sql import func
from .database import Base

class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(String, nullable=True)
    price = Column(Float)
    quantity = Column(Integer)

class Sale(Base):
    __tablename__ = "sales"
    id = Column(Integer, primary_key=True, index=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    quantity = Column(Integer)
    sale_date = Column(DateTime, default=func.now())

class Restock(Base):
    __tablename__ = "restocks"
    id = Column(Integer, primary_key=True, index=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    quantity = Column(Integer)
    restock_date = Column(DateTime, default=func.now())

class Invoice(Base):
    __tablename__ = "invoices"
    id = Column(Integer, primary_key=True, index=True)
    sale_id = Column(Integer, ForeignKey("sales.id"))
    invoice_date = Column(DateTime, default=func.now())\n\n./app/crud.py:\n
from sqlalchemy.orm import Session
from . import models, schemas

# Product CRUD
def create_product(db: Session, product: schemas.ProductCreate):
    db_product = models.Product(**product.dict())
    db.add(db_product)
    db.commit()
    db.refresh(db_product)
    print(db_product.__dict__)  # Log the created product
    return db_product   

def get_product(db: Session, product_id: int):
    return db.query(models.Product).filter(models.Product.id == product_id).first()

def get_all_products(db: Session):
    return db.query(models.Product).all()

# Sale CRUD
def create_sale(db: Session, sale: schemas.SaleCreate):
    db_sale = models.Sale(**sale.dict())
    db.add(db_sale)
    db.commit()
    db.refresh(db_sale)
    return db_sale

def get_all_sales(db: Session):
    return db.query(models.Sale).all()

# Restock CRUD
def create_restock(db: Session, restock: schemas.RestockCreate):
    db_restock = models.Restock(**restock.dict())
    db.add(db_restock)
    db.commit()
    db.refresh(db_restock)
    print(db_restock.__dict__)  # Log the created restock
    return db_restock

def get_all_restocks(db: Session):
    return db.query(models.Restock).all()

# Invoice CRUD
def create_invoice(db: Session, invoice: schemas.InvoiceCreate):
    db_invoice = models.Invoice(**invoice.dict())
    db.add(db_invoice)
    db.commit()
    db.refresh(db_invoice)
    return db_invoice

def get_all_invoices(db: Session):
    return db.query(models.Invoice).all()


def update_product(db: Session, product_id: int, product: schemas.ProductUpdate):
    db_product = db.query(models.Product).filter(models.Product.id == product_id).first()
    if db_product:
        for key, value in product.dict(exclude_unset=True).items():
            setattr(db_product, key, value)
        db.commit()
        db.refresh(db_product)
    return db_product\n\n./static/css/style.css:\n
/* General Styles */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
    color: #333;
    line-height: 1.6;
}

.container {
    width: 90%;
    max-width: 1200px;
    margin: 20px auto;
    padding: 20px;
    background-color: #fff;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
}

h1 {
    color: #333;
    text-align: center;
    margin-bottom: 20px;
    font-size: 2.5em;
    font-weight: 300;
}

/* Form Styles */
form {
    margin-bottom: 20px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: 600;
    color: #555;
}

input[type="text"],
input[type="number"],
select {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 1em;
    transition: border-color 0.3s ease;
}

input[type="text"]:focus,
input[type="number"]:focus,
select:focus {
    border-color: #28a745;
    outline: none;
}

button {
    padding: 10px 20px;
    background-color: #28a745;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1em;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

button:hover {
    background-color: #218838;
    transform: translateY(-2px);
}

button:active {
    transform: translateY(0);
}

/* Table Styles */
table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    background-color: #fff;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    overflow: hidden;
}

th, td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #f8f9fa;
    font-weight: 600;
    color: #333;
}

tr:hover {
    background-color: #f1f1f1;
}

/* Navigation Styles */
.navbar {
    background-color: #333;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.navbar a {
    float: left;
    display: block;
    color: #f2f2f2;
    text-align: center;
    padding: 14px 20px;
    text-decoration: none;
    transition: background-color 0.3s ease, color 0.3s ease;
}

.navbar a:hover {
    background-color: #444;
    color: #fff;
}

.navbar a.active {
    background-color: #28a745;
    color: white;
}

/* Responsive Table Styles */
@media (max-width: 768px) {
    table, thead, tbody, th, td, tr {
        display: block;
    }
    th {
        position: absolute;
        top: -9999px;
        left: -9999px;
    }
    tr {
        border: 1px solid #ccc;
        margin-bottom: 10px;
        border-radius: 4px;
    }
    td {
        border: none;
        position: relative;
        padding-left: 50%;
        text-align: right;
    }
    td:before {
        position: absolute;
        left: 10px;
        content: attr(data-label);
        font-weight: bold;
        text-align: left;
    }
}

/* Additional Modern Styles */
.container {
    transition: box-shadow 0.3s ease;
}

.container:hover {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}

button {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

button:hover {
    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
}

/* Gradient Background for Buttons */
button {
    background: linear-gradient(135deg, #28a745, #218838);
}

button:hover {
    background: linear-gradient(135deg, #218838, #1e7e34);
}

/* Subtle Animations */
@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

.container {
    animation: fadeIn 0.5s ease-in-out;
}\n\n./static/js/main.js:\n
// Function to handle form submissions
async function submitForm(formId, endpoint, method = "POST") {
    const form = document.getElementById(formId);
    form.addEventListener("submit", async (e) => {
        e.preventDefault();
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch(endpoint, {
                method: method,
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
            });

            if (response.ok) {
                alert("Operation successful!");
                window.location.reload(); // Reload the page to reflect changes
            } else {
                alert("Something went wrong!");
            }
        } catch (error) {
            console.error("Error:", error);
        }
    });
}

// Example: Handle product form submission
document.addEventListener("DOMContentLoaded", () => {
    submitForm("productForm", "/products/");
    submitForm("saleForm", "/sales/");
    submitForm("restockForm", "/restocks/");
    submitForm("invoiceForm", "/invoices/");
});


// Function to handle edit form submission
async function submitEditForm(formId, endpoint, method = "PUT") {
    const form = document.getElementById(formId);
    form.addEventListener("submit", async (e) => {
        e.preventDefault();
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch(endpoint, {
                method: method,
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
            });

            if (response.ok) {
                alert("Product updated successfully!");
                window.location.href = "/products"; // Redirect to products page
            } else {
                alert("Something went wrong!");
            }
        } catch (error) {
            console.error("Error:", error);
        }
    });
}

// Handle edit product form submission
document.addEventListener("DOMContentLoaded", () => {
    submitEditForm("editProductForm", `/products/${document.getElementById("id").value}`);
});

{% extends "base.html" %}

{% block content %}
    <h1>Sales Management</h1>

    <h2>Record Sale</h2>
    <form id="saleForm">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required>

        <button type="submit">Record Sale</button>
    </form>

    <h2>Sales History</h2>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Product ID</th>
                <th>Quantity</th>
                <th>Sale Date</th>
            </tr>
        </thead>
        <tbody>
            {% for sale in sales %}
            <tr>
                <td>{{ sale.id }}</td>
                <td>{{ sale.product_id }}</td>
                <td>{{ sale.quantity }}</td>
                <td>{{ sale.sale_date }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
{% endblock %}\n\n./templates/index.html:\n
{% extends "base.html" %}

{% block content %}
    <h1>Welcome to Inventory Management</h1>
    <p>Manage your products, sales, restocks, and invoices efficiently.</p>

    <h2>Quick Links</h2>
    <ul>
        <li><a href="/products">Manage Products</a></li>
        <li><a href="/sales">Record Sales</a></li>
        <li><a href="/restocks">Record Restocks</a></li>
        <li><a href="/invoices">Generate Invoices</a></li>
    </ul>
{% endblock %}\n\n./templates/restocks.html:\n
{% extends "base.html" %}

{% block content %}
    <h1>Restock Management</h1>

    <h2>Record Restock</h2>
    <form id="restockForm">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required>

        <button type="submit">Record Restock</button>
    </form>

    <h2>Restock History</h2>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Product ID</th>
                <th>Quantity</th>
                <th>Restock Date</th>
            </tr>
        </thead>
        <tbody>
            {% for restock in restocks %}
            <tr>
                <td>{{ restock.id }}</td>
                <td>{{ restock.product_id }}</td>
                <td>{{ restock.quantity }}</td>
                <td>{{ restock.restock_date }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
{% endblock %}\n\n./templates/invoices.html:\n
{% extends "base.html" %}

{% block content %}
    <h1>Invoice Management</h1>

    <h2>Generate Invoice</h2>
    <form id="invoiceForm">
        <label for="sale_id">Sale ID:</label>
        <input type="number" id="sale_id" name="sale_id" required>

        <button type="submit">Generate Invoice</button>
    </form>

    <h2>Invoice History</h2>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Sale ID</th>
                <th>Invoice Date</th>
            </tr>
        </thead>
        <tbody>
            {% for invoice in invoices %}
            <tr>
                <td>{{ invoice.id }}</td>
                <td>{{ invoice.sale_id }}</td>
                <td>{{ invoice.invoice_date }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
{% endblock %}\n\n./templates/sales_report.html:\n
<!-- templates/sales_report.html -->
{% extends "base.html" %}

{% block content %}
<div class="row mb-4">
    <div class="col">
        <h2>Sales Report</h2>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Total Sales</th>
                <th>Total Revenue</th>
            </tr>
        </thead>
        <tbody>
            {% for report in sales_report %}
            <tr>
                <td>{{ report.sale_date }}</td>
                <td>{{ report.total_sales }}</td>
                <td>${{ "%.2f"|format(report.total_revenue) }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
{% endblock %}\n\n./templates/products.html:\n
{% extends "base.html" %}

{% block content %}
    <h1>Product Management</h1>

    <h2>Add Product</h2>
    <form id="productForm">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required>

        <label for="description">Description:</label>
        <input type="text" id="description" name="description">

        <label for="price">Price:</label>
        <input type="number" id="price" name="price" step="0.01" required>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required>

        <button type="submit">Add Product</button>
    </form>

    <h2>Product List</h2>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for product in products %}
            <tr>
                <td>{{ product.id }}</td>
                <td>{{ product.name }}</td>
                <td>{{ product.description }}</td>
                <td>{{ product.price }}</td>
                <td>{{ product.quantity }}</td>
                <td>
                    <a href="/products/{{ product.id }}/edit">Edit</a>
                    <a href="/products/{{ product.id }}/delete">Delete</a>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
{% endblock %}\n\n./templates/edit_product.html:\n
{% extends "base.html" %}

{% block content %}
    <h1>Edit Product</h1>

    <form id="editProductForm">
        <input type="hidden" id="id" name="id" value="{{ product.id }}">

        <label for="name">Name:</label>
        <input type="text" id="name" name="name" value="{{ product.name }}" required>

        <label for="description">Description:</label>
        <input type="text" id="description" name="description" value="{{ product.description }}">

        <label for="price">Price:</label>
        <input type="number" id="price" name="price" value="{{ product.price }}" step="0.01" required>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" value="{{ product.quantity }}" required>

        <button type="submit">Update Product</button>
    </form>
{% endblock %}\n\n./templates/base.html:\n
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Management</title>
    <link rel="stylesheet" href="{{ url_for('static', path='css/style.css') }}">
</head>
<body>
    <div class="navbar">
        <a href="/">Home</a>
        <a href="/products">Products</a>
        <a href="/sales">Sales</a>
        <a href="/restocks">Restocks</a>
        <a href="/invoices">Invoices</a>
    </div>

    <div class="container">
        {% block content %}{% endblock %}
    </div>

    <script src="{{ url_for('static', path='js/main.js') }}"></script>
</body>
</html>