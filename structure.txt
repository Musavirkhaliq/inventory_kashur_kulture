.
├── app
│   ├── crud.py
│   ├── database.py
│   ├── main.py
│   ├── models.py
│   └── schemas.py
├── __init__.py
├── inventory.db
├── learn.md
├── print_contents.txt
├── README.md
├── requirements.txt
├── specifications.txt
├── static
│   ├── css
│   │   └── style.css
│   └── js
│       └── main.js
├── structure.txt
├── templates
│   ├── base.html
│   ├── customer_balances.html
│   ├── customers.html
│   ├── customer_transactions.html
│   ├── edit_product.html
│   ├── index.html
│   ├── inventory_value.html
│   ├── invoices.html
│   ├── invoice_template.html
│   ├── products.html
│   ├── restocks.html
│   ├── sales.html
│   └── sales_report.html
└── test.py

7 directories, 43 files
\n\n./test.py:\n
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Product(BaseModel):
    id: int
    name: str
    description: str
    price: float
    quantity: int

@app.post("/products/", response_model=Product)
async def create_product(product: Product):
    # Simulating a response
    print(product)
    return product  # Ensure the returned data matches the Product schema
\n\n./__init__.py:\n
from app.database import Base, engine
from app.models import Product, Sale, Restock, Invoice, Customer

# Drop all tables and recreate them
Base.metadata.drop_all(bind=engine)
Base.metadata.create_all(bind=engine)\n\n./app/schemas.py:\n
from pydantic import BaseModel, Field, validator
from typing import Optional, List
from datetime import datetime

class ProductBase(BaseModel):
    name: str
    description: Optional[str] = None
    price: float = Field(gt=0)
    quantity: int = Field(ge=0)

class ProductCreate(ProductBase):
    pass

class ProductUpdate(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    price: Optional[float] = Field(gt=0)
    quantity: Optional[int] = Field(ge=0)

class Product(ProductBase):
    id: int

    class Config:
        from_attributes = True

class CustomerBase(BaseModel):
    name: str
    email: str
    phone_number: Optional[str] = None
    address: Optional[str] = None
    balance_owe: float = Field(default=0.0, ge=0)

class CustomerCreate(CustomerBase):
    pass

class Customer(CustomerBase):
    id: int

    class Config:
        from_attributes = True

class SaleBase(BaseModel):
    product_id: int
    customer_id: int
    quantity: int = Field(gt=0)
    selling_price: float = Field(gt=0)
    amount_received: float = Field(ge=0)

class SaleCreate(SaleBase):
    pass

class Sale(SaleBase):
    id: int
    sale_date: datetime

    class Config:
        from_attributes = True

class RestockBase(BaseModel):
    product_id: int
    quantity: int

class RestockCreate(RestockBase):
    pass

class Restock(RestockBase):
    id: int
    restock_date: datetime
    product_name: str  # Add product name

    class Config:
        from_attributes = True

class InvoiceBase(BaseModel):
    sale_id: int

class InvoiceCreate(InvoiceBase):
    pass

class Invoice(InvoiceBase):
    id: int
    invoice_date: datetime

    class Config:
        from_attributes = True


\n\n./app/main.py:\n
from fastapi import FastAPI, Depends, HTTPException, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session,joinedload
from . import crud, schemas, models, database
from datetime import datetime, timedelta
app = FastAPI()

# Mount static files
app.mount("/static", StaticFiles(directory="static"), name="static")

# Initialize templates
templates = Jinja2Templates(directory="templates")

# Dependency to get the database session
def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Helper function for rendering templates
def render_template(template_name: str, request: Request, context: dict = {}):
    context["request"] = request
    return templates.TemplateResponse(template_name, context)

# Root Endpoint
@app.get("/", response_class=HTMLResponse)
def read_root(request: Request):
    return render_template("index.html", request)

# Product Endpoints
@app.get("/products", response_class=HTMLResponse)
def read_products(request: Request, db: Session = Depends(get_db)):
    products = crud.get_all_products(db)
    return render_template("products.html", request, {"products": products})

@app.post("/products/", response_model=schemas.Product)
def create_product(product: schemas.ProductCreate, db: Session = Depends(get_db)):
    return crud.create_product(db, product)

@app.get("/products/{product_id}/edit", response_class=HTMLResponse)
def edit_product(request: Request, product_id: int, db: Session = Depends(get_db)):
    product = crud.get_product(db, product_id)
    if not product:
        raise HTTPException(status_code=404, detail="Product not found")
    return render_template("edit_product.html", request, {"product": product})

@app.put("/products/{product_id}", response_model=schemas.Product)
def update_product(product_id: int, product: schemas.ProductUpdate, db: Session = Depends(get_db)):
    db_product = crud.update_product(db, product_id, product)
    if not db_product:
        raise HTTPException(status_code=404, detail="Product not found")
    return db_product

@app.delete("/products/{product_id}", response_model=schemas.Product)
def delete_product(product_id: int, db: Session = Depends(get_db)):
    db_product = crud.delete_product(db, product_id)
    if not db_product:
        raise HTTPException(status_code=404, detail="Product not found")
    return db_product

# Customer Endpoints
@app.get("/customers", response_class=HTMLResponse)
def read_customers(request: Request, db: Session = Depends(get_db)):
    customers = crud.get_all_customers(db)
    return render_template("customers.html", request, {"customers": customers})

@app.post("/customers/", response_model=schemas.Customer)
def create_customer(customer: schemas.CustomerCreate, db: Session = Depends(get_db)):
    return crud.create_customer(db, customer)

# Sale Endpoints
@app.get("/sales", response_class=HTMLResponse)
def read_sales(request: Request, db: Session = Depends(get_db)):
    products = crud.get_all_products(db)
    customers = crud.get_all_customers(db)
    sales = crud.get_all_sales(db)
    return render_template("sales.html", request, {
        "products": products,
        "customers": customers,
        "sales": sales,
    })

@app.post("/sales/", response_model=schemas.Sale)
def create_sale(sale: schemas.SaleCreate, db: Session = Depends(get_db)):
    try:
        return crud.create_sale(db, sale)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

# Restock Endpoints
@app.get("/restocks", response_class=HTMLResponse)
def read_restocks(request: Request, db: Session = Depends(get_db)):
    restocks = crud.get_all_restocks(db)
    products = crud.get_all_products(db)  # Fetch all products
    return templates.TemplateResponse(
        "restocks.html",
        {"request": request, "restocks": restocks, "products": products},
    )


@app.post("/restocks/", response_model=schemas.Restock)
def create_restock(restock: schemas.RestockCreate, db: Session = Depends(get_db)):
    try:
        return crud.create_restock(db, restock)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

# Invoice Endpoints
@app.get("/invoices", response_class=HTMLResponse)
def read_invoices(request: Request, db: Session = Depends(get_db)):
    invoices = crud.get_all_invoices(db)
    return render_template("invoices.html", request, {"invoices": invoices})

@app.post("/invoices/", response_model=schemas.Invoice)
def create_invoice(invoice: schemas.InvoiceCreate, db: Session = Depends(get_db)):
    try:
        return crud.create_invoice(db, invoice)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.get("/invoices/{invoice_id}", response_class=HTMLResponse)
def generate_invoice(invoice_id: int, request: Request, db: Session = Depends(get_db)):
    invoice = db.query(models.Invoice).options(
        joinedload(models.Invoice.sale)
        .joinedload(models.Sale.product),
        joinedload(models.Invoice.sale)
        .joinedload(models.Sale.customer)
    ).filter(models.Invoice.id == invoice_id).first()

    if not invoice:
        raise HTTPException(status_code=404, detail="Invoice not found")

    return templates.TemplateResponse(
        "invoice_template.html",
        {"request": request, "invoice": invoice}
    )


@app.get("/customers/{customer_id}/transactions", response_class=HTMLResponse)
def view_customer_transactions(request: Request, customer_id: int, db: Session = Depends(get_db)):
    customer = crud.get_customer_by_id(db, customer_id)
    if not customer:
        raise HTTPException(status_code=404, detail="Customer not found")
    
    transactions = db.query(models.Sale).filter(models.Sale.customer_id == customer_id).all()
    return render_template("customer_transactions.html", request, {"customer": customer, "transactions": transactions})


@app.get("/sales/report", response_class=HTMLResponse)
def sales_report(request: Request, db: Session = Depends(get_db)):
    daily_sales = db.query(models.Sale).filter(models.Sale.sale_date >= datetime.today().date()).all()
    weekly_sales = db.query(models.Sale).filter(models.Sale.sale_date >= datetime.today().date() - timedelta(days=7)).all()
    monthly_sales = db.query(models.Sale).filter(models.Sale.sale_date >= datetime.today().date() - timedelta(days=30)).all()

    daily_total = sum(sale.selling_price * sale.quantity for sale in daily_sales)
    weekly_total = sum(sale.selling_price * sale.quantity for sale in weekly_sales)
    monthly_total = sum(sale.selling_price * sale.quantity for sale in monthly_sales)

    return render_template("sales_report.html", request, {
        "daily_sales": daily_sales,
        "weekly_sales": weekly_sales,
        "monthly_sales": monthly_sales,
        "daily_total": daily_total,
        "weekly_total": weekly_total,
        "monthly_total": monthly_total,
    })

@app.get("/customers/balances", response_class=HTMLResponse)
def customer_balances(request: Request, db: Session = Depends(get_db)):
    customers = db.query(models.Customer).all()
    return render_template("customer_balances.html", request, {"customers": customers})


@app.get("/inventory/value", response_class=HTMLResponse)
def inventory_value(request: Request, db: Session = Depends(get_db)):
    products = db.query(models.Product).all()
    total_value = sum(product.price * product.quantity for product in products)
    return render_template("inventory_value.html", request, {"total_value": total_value})\n\n./app/database.py:\n
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

class Settings:
    DATABASE_URL = "sqlite:///./inventory.db"  # Replace with your actual database URL

settings = Settings()


SQLALCHEMY_DATABASE_URL = settings.DATABASE_URL

engine = create_engine(
    SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()\n\n./app/models.py:\n
from sqlalchemy import Column, Integer, String, Float, DateTime, ForeignKey, JSON
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from .database import Base

# class Product(Base):
#     __tablename__ = "products"
#     id = Column(Integer, primary_key=True, index=True)
#     name = Column(String, index=True)
#     description = Column(String, nullable=True)
#     price = Column(Float)
#     quantity = Column(Integer)

#     sales = relationship("Sale", back_populates="product")

class Customer(Base):
    __tablename__ = "customers"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    email = Column(String, unique=True, index=True)
    phone_number = Column(String)
    address = Column(String)
    balance_owe = Column(Float, default=0.0)
    previous_transactions = Column(JSON, default=[])

    sales = relationship("Sale", back_populates="customer")

class Sale(Base):
    __tablename__ = "sales"
    id = Column(Integer, primary_key=True, index=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    customer_id = Column(Integer, ForeignKey("customers.id"))
    quantity = Column(Integer)
    selling_price = Column(Float)
    amount_received = Column(Float)
    balance = Column(Float)
    profit = Column(Float)
    sale_date = Column(DateTime, default=func.now())

    product = relationship("Product", back_populates="sales")
    customer = relationship("Customer", back_populates="sales")
    invoice = relationship("Invoice", back_populates="sale", uselist=False)




class Restock(Base):
    __tablename__ = "restocks"
    id = Column(Integer, primary_key=True, index=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    quantity = Column(Integer)
    restock_date = Column(DateTime, default=func.now())

    # Add relationship to Product
    product = relationship("Product", back_populates="restocks")
    

# Add back-populate to Product model
class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(String, nullable=True)
    price = Column(Float)
    quantity = Column(Integer)

    # Define relationships
    sales = relationship("Sale", back_populates="product")  # Relationship to Sale
    restocks = relationship("Restock", back_populates="product")  # Relationship to Restock
class Invoice(Base):
    __tablename__ = "invoices"
    id = Column(Integer, primary_key=True, index=True)
    sale_id = Column(Integer, ForeignKey("sales.id"))
    invoice_date = Column(DateTime, default=func.now())

    sale = relationship("Sale", back_populates="invoice")\n\n./app/crud.py:\n
from sqlalchemy.orm import Session
from . import models, schemas
from datetime import datetime
from typing import List, Optional

# Utility functions
def get_product_by_id(db: Session, product_id: int) -> Optional[models.Product]:
    return db.query(models.Product).filter(models.Product.id == product_id).first()

def get_customer_by_id(db: Session, customer_id: int) -> Optional[models.Customer]:
    return db.query(models.Customer).filter(models.Customer.id == customer_id).first()

# Product CRUD
def create_product(db: Session, product: schemas.ProductCreate) -> models.Product:
    db_product = models.Product(**product.dict())
    db.add(db_product)
    db.commit()
    db.refresh(db_product)
    return db_product

def get_all_products(db: Session) -> List[models.Product]:
    return db.query(models.Product).all()



def delete_product(db: Session, product_id: int) -> Optional[models.Product]:
    db_product = get_product_by_id(db, product_id)
    if db_product:
        db.delete(db_product)
        db.commit()
    return db_product

# Customer CRUD
def create_customer(db: Session, customer: schemas.CustomerCreate) -> models.Customer:
    db_customer = models.Customer(**customer.dict())
    db.add(db_customer)
    db.commit()
    db.refresh(db_customer)
    return db_customer

def get_all_customers(db: Session) -> List[models.Customer]:
    return db.query(models.Customer).all()

# Sale CRUD
def create_sale(db: Session, sale: schemas.SaleCreate):
    product = get_product_by_id(db, sale.product_id)
    if not product:
        raise ValueError("Product not found")
    if product.quantity < sale.quantity:
        raise ValueError("Not enough stock available")

    customer = get_customer_by_id(db, sale.customer_id)
    if not customer:
        raise ValueError("Customer not found")

    profit = (sale.selling_price*sale.quantity) - (product.price * sale.quantity)
    balance = (sale.selling_price*sale.quantity) - sale.amount_received

    product.quantity -= sale.quantity
    customer.balance_owe += balance

    db_sale = models.Sale(
        product_id=sale.product_id,
        customer_id=sale.customer_id,
        quantity=sale.quantity,
        selling_price=sale.selling_price,
        amount_received=sale.amount_received,
        balance=balance,
        profit=profit,
    )

    db.add(db_sale)
    db.commit()
    db.refresh(db_sale)
    return db_sale

def get_all_sales(db: Session) -> List[models.Sale]:
    return db.query(models.Sale).all()

# Restock CRUD
def create_restock(db: Session, restock: schemas.RestockCreate):
    db_restock = models.Restock(**restock.dict())
    db.add(db_restock)
    db.commit()
    db.refresh(db_restock)

    # Update product quantity
    product = db.query(models.Product).filter(models.Product.id == restock.product_id).first()
    if product:
        product.quantity += restock.quantity  # Add restocked quantity
        db.commit()
        db.refresh(product)

    return db_restock

def get_all_restocks(db: Session) -> List[models.Restock]:
    return db.query(models.Restock).all()

# Invoice CRUD
def create_invoice(db: Session, invoice: schemas.InvoiceCreate) -> models.Invoice:
    sale = db.query(models.Sale).filter(models.Sale.id == invoice.sale_id).first()
    if not sale:
        raise ValueError("Sale not found")

    db_invoice = models.Invoice(**invoice.dict())
    db.add(db_invoice)
    db.commit()
    db.refresh(db_invoice)
    return db_invoice

def get_all_invoices(db: Session) -> List[models.Invoice]:
    return db.query(models.Invoice).all()

def update_product(db: Session, product_id: int, product_update: schemas.ProductUpdate):
    db_product = db.query(models.Product).filter(models.Product.id == product_id).first()
    if not db_product:
        return None
    update_data = product_update.dict(exclude_unset=True)
    for key, value in update_data.items():
        setattr(db_product, key, value)
    db.commit()
    db.refresh(db_product)
    return db_product

# def update_product(db: Session, product_id: int, product: schemas.ProductUpdate) -> Optional[models.Product]:
#     db_product = get_product_by_id(db, product_id)
#     if db_product:
#         for key, value in product.dict(exclude_unset=True).items():
#             setattr(db_product, key, value)
#         db.commit()
#         db.refresh(db_product)
#     return db_product

\n\n./static/css/style.css:\n
/* General Styles */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
    color: #333;
    line-height: 1.6;
}

.container {
    width: 90%;
    max-width: 1200px;
    margin: 20px auto;
    padding: 20px;
    background-color: #fff;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
}

h1 {
    color: #333;
    text-align: center;
    margin-bottom: 20px;
    font-size: 2.5em;
    font-weight: 300;
}

/* Form Styles */
form {
    margin-bottom: 20px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: 600;
    color: #555;
}

input[type="text"],
input[type="number"],
select {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 1em;
    transition: border-color 0.3s ease;
}

input[type="text"]:focus,
input[type="number"]:focus,
select:focus {
    border-color: #28a745;
    outline: none;
}

button {
    padding: 10px 20px;
    background-color: #28a745;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1em;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

button:hover {
    background-color: #218838;
    transform: translateY(-2px);
}

button:active {
    transform: translateY(0);
}

/* Table Styles */
table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    background-color: #fff;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    overflow: hidden;
}

th, td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #f8f9fa;
    font-weight: 600;
    color: #333;
}

tr:hover {
    background-color: #f1f1f1;
}

/* Navigation Styles */
.navbar {
    background-color: #333;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
}

.navbar a {
    color: #f2f2f2;
    text-align: center;
    padding: 14px 20px;
    text-decoration: none;
    transition: background-color 0.3s ease, color 0.3s ease;
}

.navbar a:hover {
    background-color: #444;
    color: #fff;
}

.navbar a.active {
    background-color: #28a745;
    color: white;
}

/* Responsive Table Styles */
@media (max-width: 768px) {
    table, thead, tbody, th, td, tr {
        display: block;
    }
    th {
        position: absolute;
        top: -9999px;
        left: -9999px;
    }
    tr {
        border: 1px solid #ccc;
        margin-bottom: 10px;
        border-radius: 4px;
    }
    td {
        border: none;
        position: relative;
        padding-left: 50%;
        text-align: right;
    }
    td:before {
        position: absolute;
        left: 10px;
        content: attr(data-label);
        font-weight: bold;
        text-align: left;
    }
}

/* Additional Modern Styles */
.container {
    transition: box-shadow 0.3s ease;
}

.container:hover {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}

button {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

button:hover {
    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
}

/* Gradient Background for Buttons */
button {
    background: linear-gradient(135deg, #28a745, #218838);
}

button:hover {
    background: linear-gradient(135deg, #218838, #1e7e34);
}

/* Subtle Animations */
@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

.container {
    animation: fadeIn 0.5s ease-in-out;
}

/* Responsive Navigation */
@media (max-width: 600px) {
    .navbar a {
        flex: 1 1 100%;
        padding: 10px;
    }
}\n\n./static/js/main.js:\n



// Function to handle form submissions
async function submitForm(formId, endpoint, method = "POST") {
    const form = document.getElementById(formId);
    if (!form) return;

    form.removeEventListener("submit", handleSubmit);

    async function handleSubmit(e) {
        e.preventDefault();

        const submitButton = form.querySelector("button[type='submit']");
        if (submitButton) {
            submitButton.disabled = true;
            submitButton.textContent = "Submitting...";
        }

        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch(endpoint, {
                method: method,
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
            });

            if (response.ok) {
                alert("Operation successful!");
                window.location.reload();
            } else {
                const errorData = await response.json();
                alert(`Error: ${errorData.detail || "Something went wrong!"}`);
            }
        } catch (error) {
            console.error("Error:", error);
            alert("An error occurred. Please try again.");
        } finally {
            if (submitButton) {
                submitButton.disabled = false;
                submitButton.textContent = "Submit";
            }
        }
    }

    form.addEventListener("submit", handleSubmit);
}

// Initialize form submissions when the DOM is fully loaded
document.addEventListener("DOMContentLoaded", () => {
    submitForm("productForm", "/products/");
    submitForm("customerForm", "/customers/");
    submitForm("saleForm", "/sales/");
    submitForm("restockForm", "/restocks/");
    submitForm("invoiceForm", "/invoices/");

    const editProductForm = document.getElementById("editProductForm");
    if (editProductForm) {
        const productId = document.getElementById("id").value;
        submitForm("editProductForm", `/products/${productId}`, "PUT");
    }
});

// document.addEventListener("DOMContentLoaded", () => {
//     submitForm("restockForm", "/restocks/");
// });

sales.html:

{% extends "base.html" %}

{% block content %}
    <div class="container">
        <h1 class="text-center mb-4">Sales Management</h1>

        <!-- Record Sale Form -->
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h2 class="card-title">Record Sale</h2>
            </div>
            <div class="card-body">
                <form id="saleForm" class="row g-3">
                    <div class="col-md-6">
                        <label for="product_id" class="form-label">Product</label>
                        <select id="product_id" name="product_id" class="form-select" required>
                            {% for product in products %}
                                <option value="{{ product.id }}">{{ product.name }} (Price: {{ product.price }})</option>
                            {% else %}
                                <option value="" disabled>No products available</option>
                            {% endfor %}
                        </select>
                        <a href="/products" class="btn btn-link mt-2">Add New Product</a>
                    </div>
                    <div class="col-md-6">
                        <label for="customer_id" class="form-label">Customer</label>
                        <select id="customer_id" name="customer_id" class="form-select" required>
                            {% for customer in customers %}
                                <option value="{{ customer.id }}">{{ customer.name }}</option>
                            {% else %}
                                <option value="" disabled>No customers available</option>
                            {% endfor %}
                        </select>
                        <a href="/customers" class="btn btn-link mt-2">Add New Customer</a>
                    </div>
                    <div class="col-md-4">
                        <label for="quantity" class="form-label">Quantity</label>
                        <input type="number" id="quantity" name="quantity" class="form-control" required>
                    </div>
                    <div class="col-md-4">
                        <label for="selling_price" class="form-label">Selling Price</label>
                        <input type="number" id="selling_price" name="selling_price" class="form-control" step="0.01" required>
                    </div>
                    <div class="col-md-4">
                        <label for="amount_received" class="form-label">Amount Received</label>
                        <input type="number" id="amount_received" name="amount_received" class="form-control" step="0.01" required>
                    </div>
                    <div class="col-12">
                        <button type="submit" class="btn btn-success">Record Sale</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Sales History Table -->
        <div class="card">
            <div class="card-header bg-info text-white">
                <h2 class="card-title">Sales History</h2>
            </div>
            <div class="card-body">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Product</th>
                            <th>Customer</th>
                            <th>Quantity</th>
                            <th>Selling Price</th>
                            <th>Amount Received</th>
                            <th>Balance</th>
                            <th>Profit</th>
                            <th>Sale Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for sale in sales %}
                            <tr>
                                <td>{{ sale.id }}</td>
                                <td>{{ sale.product.name if sale.product else 'N/A' }}</td>
                                <td>{{ sale.customer.name if sale.customer else 'N/A' }}</td>
                                <td>{{ sale.quantity }}</td>
                                <td>{{ sale.selling_price }}</td>
                                <td>{{ sale.amount_received }}</td>
                                <td>{{ sale.balance }}</td>
                                <td>{{ sale.profit }}</td>
                                <td>{{ sale.sale_date }}</td>
                            </tr>
                        {% else %}
                            <tr>
                                <td colspan="9" class="text-center">No sales recorded yet.</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
{% endblock %}

other front end files html
